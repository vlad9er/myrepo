AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  Is-EC2-Classic:
    Fn::Not:
    - Condition: Is-EC2-VPC
  Is-EC2-VPC:
    Fn::Or:
    - Fn::Equals:
      - Ref: AWS::Region
      - eu-central-1
    - Fn::Equals:
      - Ref: AWS::Region
      - cn-north-1
Description: 'AWS CloudFormation Sample Template WordPress_Multi_AZ: WordPress is
  web software you can use to create a beautiful website or blog. This template installs
  a highly-available, scalable WordPress deployment using a multi-az Amazon RDS database
  instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts
  to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance, an
  Elastic Load Balancer and an Amazon RDS database instance. You will be billed for
  the AWS resources used if you create a stack from this template.'
Mappings:
  AWSInstanceType2Arch:
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m1.large:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.small:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t1.micro:
      Arch: PV64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-cbf90ecb
      HVMG2: ami-6318e863
      PV64: ami-27f90e27
    ap-southeast-1:
      HVM64: ami-68d8e93a
      HVMG2: ami-3807376a
      PV64: ami-acd9e8fe
    ap-southeast-2:
      HVM64: ami-fd9cecc7
      HVMG2: ami-89790ab3
      PV64: ami-ff9cecc5
    cn-north-1:
      HVM64: ami-f239abcb
      HVMG2: NOT_SUPPORTED
      PV64: ami-fa39abc3
    eu-central-1:
      HVM64: ami-a8221fb5
      HVMG2: ami-7cd2ef61
      PV64: ami-ac221fb1
    eu-west-1:
      HVM64: ami-a10897d6
      HVMG2: ami-d5bc24a2
      PV64: ami-bf0897c8
    sa-east-1:
      HVM64: ami-b52890a8
      HVMG2: NOT_SUPPORTED
      PV64: ami-bb2890a6
    us-east-1:
      HVM64: ami-1ecae776
      HVMG2: ami-8c6b40e4
      PV64: ami-1ccae774
    us-west-1:
      HVM64: ami-d114f295
      HVMG2: ami-f31ffeb7
      PV64: ami-d514f291
    us-west-2:
      HVM64: ami-e7527ed7
      HVMG2: ami-abbe919b
      PV64: ami-ff527ecf
Outputs:
  WebsiteURL:
    Description: WordPress Website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ElasticLoadBalancer
          - DNSName
        - /wordpress
Parameters:
  DBAllocatedStorage:
    ConstraintDescription: must be between 5 and 1024Gb.
    Default: '5'
    Description: The size of the database (Gb)
    MaxValue: '1024'
    MinValue: '5'
    Type: Number
  DBClass:
    AllowedValues:
    - db.t1.micro
    - db.m1.small
    - db.m1.medium
    - db.m1.large
    - db.m1.xlarge
    - db.m2.xlarge
    - db.m2.2xlarge
    - db.m2.4xlarge
    - db.m3.medium
    - db.m3.large
    - db.m3.xlarge
    - db.m3.2xlarge
    - db.r3.large
    - db.r3.xlarge
    - db.r3.2xlarge
    - db.r3.4xlarge
    - db.r3.8xlarge
    - db.m2.xlarge
    - db.m2.2xlarge
    - db.m2.4xlarge
    - db.cr1.8xlarge
    ConstraintDescription: must select a valid database instance type.
    Default: db.m1.small
    Description: Database instance class
    Type: String
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: wordpressdb
    Description: The WordPress database name
    MaxLength: '64'
    MinLength: '1'
    Type: String
  DBPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The WordPress database admin account password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: The WordPress database admin account username
    MaxLength: '16'
    MinLength: '1'
    NoEcho: 'true'
    Type: String
  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m1.small
    Description: WebServer EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  MultiAZDatabase:
    AllowedValues:
    - 'true'
    - 'false'
    ConstraintDescription: must be either true or false.
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  WebServerCapacity:
    ConstraintDescription: must be between 1 and 5 EC2 instances.
    Default: '1'
    Description: The initial number of WebServer instances
    MaxValue: '5'
    MinValue: '1'
    Type: Number
Resources:
  DBEC2SecurityGroup:
    Condition: Is-EC2-VPC
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - FromPort: '3306'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: WebServerSecurityGroup
        ToPort: '3306'
    Type: AWS::EC2::SecurityGroup
  DBInstance:
    Properties:
      AllocatedStorage:
        Ref: DBAllocatedStorage
      DBInstanceClass:
        Ref: DBClass
      DBName:
        Ref: DBName
      DBSecurityGroups:
        Fn::If:
        - Is-EC2-Classic
        - - Ref: DBSecurityGroup
        - Ref: AWS::NoValue
      Engine: MySQL
      MasterUserPassword:
        Ref: DBPassword
      MasterUsername:
        Ref: DBUser
      MultiAZ:
        Ref: MultiAZDatabase
      VPCSecurityGroups:
        Fn::If:
        - Is-EC2-VPC
        - - Fn::GetAtt:
            - DBEC2SecurityGroup
            - GroupId
        - Ref: AWS::NoValue
    Type: AWS::RDS::DBInstance
  DBSecurityGroup:
    Condition: Is-EC2-Classic
    Properties:
      DBSecurityGroupIngress:
        EC2SecurityGroupName:
          Ref: WebServerSecurityGroup
      GroupDescription: database access
    Type: AWS::RDS::DBSecurityGroup
  ElasticLoadBalancer:
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      CrossZone: 'true'
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: HTTP:80/wordpress/wp-admin/install.php
        Timeout: '5'
        UnhealthyThreshold: '5'
      LBCookieStickinessPolicy:
      - CookieExpirationPeriod: '30'
        PolicyName: CookieBasedPolicy
      Listeners:
      - InstancePort: '80'
        LoadBalancerPort: '80'
        PolicyNames:
        - CookieBasedPolicy
        Protocol: HTTP
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  LaunchConfig:
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
          - install_cfn
          - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - Ref: AWS::Region
                  - '
                    '
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          commands:
            01_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
          files:
            /tmp/create-wp-config:
              content:
                Fn::Join:
                - ''
                - - '#!/bin/bash

                    '
                  - 'cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php

                    '
                  - sed -i "s/'database_name_here'/'
                  - Ref: DBName
                  - '''/g" wp-config.php
                    '
                  - sed -i "s/'username_here'/'
                  - Ref: DBUser
                  - '''/g" wp-config.php
                    '
                  - sed -i "s/'password_here'/'
                  - Ref: DBPassword
                  - '''/g" wp-config.php
                    '
                  - sed -i "s/'localhost'/'
                  - Fn::GetAtt:
                    - DBInstance
                    - Endpoint.Address
                  - '''/g" wp-config.php
                    '
              group: root
              mode: '000500'
              owner: root
          packages:
            yum:
              httpd: []
              mysql: []
              php: []
              php-mysql: []
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
          sources:
            /var/www/html: http://wordpress.org/latest.tar.gz
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -xe

              '
            - 'yum update -y aws-cfn-bootstrap

              '
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource LaunchConfig '
            - '         --configsets wordpress_install '
            - '         --region '
            - Ref: AWS::Region
            - '
              '
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource WebServerGroup '
            - '         --region '
            - Ref: AWS::Region
            - '
              '
    Type: AWS::AutoScaling::LaunchConfiguration
  WebServerGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      DesiredCapacity:
        Ref: WebServerCapacity
      LaunchConfigurationName:
        Ref: LaunchConfig
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      MaxSize: '5'
      MinSize: '1'
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  WebServerSecurityGroup:
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer
        + SSH access
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Fn::GetAtt:
          - ElasticLoadBalancer
          - SourceSecurityGroup.GroupName
        SourceSecurityGroupOwnerId:
          Fn::GetAtt:
          - ElasticLoadBalancer
          - SourceSecurityGroup.OwnerAlias
        ToPort: '80'
      - CidrIp:
          Ref: SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
Type: AWS::EC2::SecurityGroup